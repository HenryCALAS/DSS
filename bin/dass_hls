#! /usr/bin/env python3
# ----------------------------------------
#       DASS HLS Compiler
#        by Jianyi Cheng
#         24/12/2021
# ----------------------------------------

from optparse import OptionParser
import sys, os, time, logging, colorlog, glob, subprocess, multiprocessing, shutil, functools

# ---------- helper functions --------------

def getTime():
    return time.strftime("%d/%m/%Y %H:%M:%S")

def getLogger(name: str, logFile: str = "", console: bool = True) -> logging.Logger:
    # add a trace level
    logging.TRACE = logging.DEBUG - 5
    logging.addLevelName(logging.TRACE, 'TRACE')
    logging.Logger.trace = functools.partialmethod(logging.Logger.log, logging.TRACE)
    logging.trace = functools.partial(logging.log, logging.TRACE)

    logger = logging.getLogger(name)
    logger.setLevel(logging.TRACE) 
    
    if logFile:
        if os.path.isfile(logFile):
            os.remove(logFile)
        # File handle
        class customFileFormat(logging.Formatter):
            format = "[%(asctime)s][%(levelname)s] %(message)s" 
            def format(self, record):
                logformat = "%(message)s" if record.levelno == logging.TRACE else "[%(asctime)s][%(levelname)s] %(message)s" 
                formatter = logging.Formatter(logformat, "%Y-%m-%d %H:%M:%S")
                return formatter.format(record)
        fh = logging.FileHandler(logFile)
        fh.setFormatter(customFileFormat())
        fh.setLevel(logging.TRACE)
        logger.addHandler(fh)

    # Console handler
    if console:
        ch = logging.StreamHandler()
        class customConsoleFormat(logging.Formatter):
            format = "[%(asctime)s][%(levelname)s] %(message)s" 
            def format(self, record):
                traceformat = logging.Formatter("%(message)s", "%Y-%m-%d %H:%M:%S")
                colorformat = colorlog.ColoredFormatter(
                    "%(log_color)s[%(asctime)s][%(levelname)s]%(reset)s"
                    + " %(message_log_color)s%(message)s",
                    "%Y-%m-%d %H:%M:%S",
                    log_colors={
                        "DEBUG": "cyan",
                        "INFO": "green",
                        "WARNING": "yellow",
                        "ERROR": "red",
                        "CRITICAL": "red,bg_white",
                    },
                    secondary_log_colors={"message": {"ERROR": "red", "CRITICAL": "red"}},
                )
                logformat = traceformat if record.levelno == logging.TRACE else colorformat
                return logformat.format(record)
        ch.setFormatter(customConsoleFormat())
        ch.setLevel(logging.TRACE)
        logger.addHandler(ch)
    return logger

# ---------- dass class --------------

class dass:
    
    def __init__(self, options):
        self.options = options
        self.logger = getLogger('dass', 'dass_hls.log')
        self.root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
        self.clang = os.path.join(self.root, "llvm", "build", "bin", "clang")
        self.opt = os.path.join(self.root, "llvm", "build", "bin", "opt")
        self.top = self.options.top
        
        header = '''
 ===================================== 
     DASS HLS Compiler
     {}
 =====================================
'''.format(getTime())
        self.logger.info(header)

        debugInfo = '''
 Environment variables:
    DASS = {}
    clang = {}
    opt = {}

 Top-level design name:
    {}
 '''.format(self.root, self.clang, self.opt, self.top)
        self.logger.debug(debugInfo)

    def run(self):
        # Option check
        if self.options.target != 'zynq' and self.options.target != 'xcvu':
            self.logger.error('Target not supported: {}. Please use zynq or xcvu'.format(self.options.target))    
            exit()
        # Run DASS
        if self.options.synthesis:
            if not self.options.skipfrontend:
                self.preprocess()
                if self.options.autodass:
                    self.autodass()
                if 'dass_ss' in open('{}.ll'.format(self.top)).read():
                    self.synthesizeislands()
            if not self.options.skipbuffer:
                self.insertbuffer()
            self.generateRTL()
        if self.options.cosim:
            self.cosim()
        if self.options.evaluate:
            self.evaluate()
        self.exit()

    def exit(self):
        self.logger.info('Done, Exiting...')

    def execute(self, cmd, logoutput: bool = True, logfile = None, cwd = '.'):
        if logoutput:
            with subprocess.Popen(cmd, stdout = subprocess.PIPE, bufsize = 1, universal_newlines=True, cwd = cwd) as result:
                if logfile: f = open(logfile, 'w')
                if result.stdout or result.stderr: 
                    self.logger.info('')
                if result.stdout:
                    for line in result.stdout:
                        if logfile: f.write(line)
                        line = line.rstrip("\n")
                        self.logger.trace(line)
                if result.stderr:
                    for line in result.stderr:
                        if logfile: f.write(line)
                        line = line.rstrip("\n")
                        self.logger.trace(line)
                if logfile: f.close() 
        else:
            result = subprocess.run(cmd, stdout = subprocess.DEVNULL, cwd = cwd)
        if result.returncode:
            self.logger.error('Command failed: {}'.format(subprocess.list2cmdline(cmd)))
            sys.exit()
        return result.returncode
 
    def evaluate(self):
        self.logger.info('Running Vivado for Post Synthesis analysis...')
        target = 'xc7z020clg484-1' if self.options.target == 'zynq' else 'xcvu125-flva2104-1-i'
        cmd = ['python3', os.path.join(self.root, 'dass', 'scripts', 'VitisSynthesisTCLGen.py'), '-t', self.top, '-d', self.root, '-j', self.options.jobs, '--target', target]
        self.logger.debug(subprocess.list2cmdline(cmd))
        evaluatetclgen = self.execute(cmd)
        cmd = ['vivado', '-mode', 'batch', '-source', 'syn.tcl']
        self.logger.debug(subprocess.list2cmdline(cmd))
        runvivado = self.execute(cmd, logfile = 'evaluate.log')
    
    def cosim(self):
        self.logger.info('Running co-simulation...')
        if not os.path.isdir('sim'):
            os.mkdir('sim')
        for p in glob.glob(os.path.join('sim', '*')):
            shutil.rmtree(p)
        simdirs = ['C_OUT', 'C_SRC', 'HLS_VERIFY', 'INPUT_VECTORS', 'VHDL_OUT', 'VHDL_SRC']
        for simdir in simdirs:
            os.mkdir(os.path.join('sim', simdir))
        for p in glob.glob('{}.c*'.format(self.top)) + glob.glob('{}.h*'.format(self.top)):
            shutil.copy(p, os.path.join('sim', 'C_SRC'))
        for p in glob.glob(os.path.join('rtl', '*')):
            shutil.copy(p, os.path.join('sim', 'VHDL_SRC'))
        hlsverifier = os.path.join(self.root, 'dass', 'tools', 'HlsVerifier', 'build', 'hlsverifier')
        cfile = glob.glob('{}.c*'.format(self.top))[0]
        cmd = [hlsverifier, 'cover', '-aw32', os.path.join('..', 'C_SRC', cfile), os.path.join('..', 'C_SRC', cfile), self.top]
        self.logger.debug(subprocess.list2cmdline(cmd))
        runcosim = self.execute(cmd, logfile = os.path.join('sim', 'HLS_VERIFY', 'transcript'), cwd = os.path.join('sim', 'HLS_VERIFY'))
    
    def generateRTL(self):
        self.logger.info('Generating RTL...')
        if not os.path.isdir('rtl'):
            os.mkdir('rtl')
        for p in glob.glob(os.path.join('rtl', '*')):
            os.remove(p)
        memelemlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'MemElemInfo', 'libLLVMMemElemInfo.so')
        elasticlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'ElasticPass', 'libElasticPass.so')
        optimizebwlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'OptimizeBitwidth', 'libLLVMOptimizeBitWidth.so')
        cfglib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'MyCFGPass', 'libMyCFGPass.so')
        dasssynthesislib = os.path.join(self.root, 'dass', 'build', 'Synthesis', 'libSynthesis.so')
        loadoptions = ['-load', memelemlib, '-load', elasticlib, '-load', optimizebwlib, '-load', cfglib, '-load', dasssynthesislib]
        llvmoptions = ['-simple-buffers={}'.format(self.options.simplebuffers), '-use-lsq={}'.format(self.options.uselsq), '-has_offset={}'.format(self.options.offset), '-if-conversion={}'.format(self.options.ifconv), '-has_ip=true', '-dass_dir={}'.format(self.root), '-ir_dir=vhls', '-top={}'.format(self.top), '-rtl=verilog']
        if 'dass_ss' in open('{}.ll'.format(self.top)).read():
            cmd = [self.opt] + loadoptions + ['-ss-wrapper-gen', '{}_ds.ll'.format(self.top), '-S'] + llvmoptions
            self.logger.debug(subprocess.list2cmdline(cmd))
            generatewrappers = self.execute(cmd, logoutput = False)
        shutil.copy('{}_graph_buf_new.dot'.format(self.top), 'rtl/{}.dot'.format(self.top))
        dot2vhdl = os.path.join(self.root, 'dass', 'tools', 'dot2vhdl', 'bin', 'dot2vhdl')
        cmd = [dot2vhdl, self.top]
        self.logger.debug(subprocess.list2cmdline(cmd))
        rtlgen = self.execute(cmd, cwd = 'rtl', logfile = 'dot2vhdl.log')
        cmd = [self.opt] + loadoptions + ['-dass-vhdl-rewrite', '{}_ds.ll'.format(self.top), '-S'] + llvmoptions
        self.logger.debug(subprocess.list2cmdline(cmd))
        vhdlrewrite = self.execute(cmd, logoutput = False)
        os.rename(os.path.join('rtl', '{}.vhd'.format(self.top)), os.path.join('rtl', '{}_debug'.format(self.top)))
        if 'dass_ss' in open('{}.ll'.format(self.top)).read():
            cmd = [self.opt] + loadoptions + ['-collect-ss-rtl', '{}_ds.ll'.format(self.top), '-S'] + llvmoptions
            self.logger.debug(subprocess.list2cmdline(cmd))
            collectssrtl = self.execute(cmd, logoutput = False)
        elasticips = os.path.join(self.root, 'dass', 'components', '*.v*')
        arithips = os.path.join(self.root, 'dass', 'components', 'ip', '*.v*')
        for vfile in glob.glob(elasticips) + glob.glob(arithips):
            shutil.copy(vfile, 'rtl')
        vfiles = glob.glob(os.path.join('rtl', '*.v'))
        for vfile in vfiles:
            if '`timescale 1ns/1ps' not in open(vfile).read():
                cmd = ['sed', '-i', '1i `timescale 1ns/1ps', vfile]
                self.logger.debug(subprocess.list2cmdline(cmd))
                inserttimescale = self.execute(cmd)
        files2delete = glob.glob('*_freq.txt') + ['stats', 'out.txt', 'debug_func', os.path.join('rtl', '{}.dot'.format(self.top)), os.path.join('rtl', '{}_modelsim.tcl'.format(self.top)), os.path.join('rtl', '{}_vivado_synt.tcl'.format(self.top))]
        for p in files2delete:
            os.remove(p)
        for vfile in glob.glob(os.path.join(self.root, 'dass', 'components', 'ip_{}'.format(self.options.target),'*')):
            shutil.copy(vfile, 'rtl')
		
    def insertbuffer(self):
        self.profileCFG(True)
        memelemlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'MemElemInfo', 'libLLVMMemElemInfo.so')
        elasticlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'ElasticPass', 'libElasticPass.so')
        optimizebwlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'OptimizeBitwidth', 'libLLVMOptimizeBitWidth.so')
        cfglib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'MyCFGPass', 'libMyCFGPass.so')
        dasssynthesislib = os.path.join(self.root, 'dass', 'build', 'Synthesis', 'libSynthesis.so')
        loadoptions = ['-load', memelemlib, '-load', elasticlib, '-load', optimizebwlib, '-load', cfglib, '-load', dasssynthesislib]
        llvmoptions = ['-simple-buffers={}'.format(self.options.simplebuffers), '-use-lsq={}'.format(self.options.uselsq), '-has_offset={}'.format(self.options.offset), '-if-conversion={}'.format(self.options.ifconv), '-has_ip=true', '-dass_dir={}'.format(self.root)]
        cmd = [self.opt] + loadoptions + ['-polly-process-unprofitable', '-load-offset-cfg', '{}_ds.ll'.format(self.top), '-S'] + llvmoptions
        self.logger.debug(subprocess.list2cmdline(cmd))
        generatedot = self.execute(cmd, logoutput = False)
        if self.options.dotinput:
            if not os.path.isfile(self.options.dotinput):
                self.logger.error('Cannot find the specified dot input.')
                exit()
            shutil.copy(self.options.dotinput, '{}.dot'.format(self.top))
        if self.options.exportpng:
            cmd = ['dot', '-Tpng', '{}.dot'.format(self.top), '-o', '{}.png'.format(self.top)]
            self.logger.debug(subprocess.list2cmdline(cmd))
            generateunbuffpng = self.execute(cmd)
        # Assume clock period = 4ns
        period = 4
        buffer = os.path.join(self.root, 'dhls', 'Buffers', 'bin', 'buffers')
        buffercmd = 'buffers' if not self.options.skipbuffermini else 'format'
        cmd = [buffer, buffercmd, '-filename={}'.format(self.top), '-period={}'.format(period)]
        self.logger.debug(subprocess.list2cmdline(cmd))
        runbuffer = self.execute(cmd, logfile = 'buff.log')
           
        if self.options.offset:
            cmd = [self.opt] + loadoptions + ['-polly-process-unprofitable', '-remove-call-dummy', '{}_ds.ll'.format(self.top), '-S'] + llvmoptions
            self.logger.debug(subprocess.list2cmdline(cmd))
            removecalldummy = self.execute(cmd, logoutput = False)
        if self.options.ifconv:
            cmd = [self.opt] + loadoptions + ['-polly-process-unprofitable', '-buff-if-stmt', '-S'] + llvmoptions 
            self.logger.debug(subprocess.list2cmdline(cmd))
            bufferifstmt = self.execute(cmd, logoutput = False)
        dsoptimizer = os.path.join(self.root, 'dass', 'scripts', 'DynamaticOptimizer.py')
        cmd = ['python3', dsoptimizer, '-l', '{}_graph_buf_new.dot'.format(self.top)]
        self.logger.debug(subprocess.list2cmdline(cmd))
        insertloopscheduler = self.execute(cmd)
        os.rename('{}_graph_buf_new.dot'.format(self.top), '{}_graph_buf_new.dot.1'.format(self.top))
        os.rename('{}_graph_buf_new_new.dot'.format(self.top), '{}_graph_buf_new.dot'.format(self.top))
        if self.options.exportpng:
            cmd = ['dot', '-Tpng', '{}_graph_buf_new.dot'.format(self.top), '-o', '{}_new.png'.format(self.top)]
            self.logger.debug(subprocess.list2cmdline(cmd))
            generatebuffedpng = self.execute(cmd)
        if int(self.options.superbuffdepth) > 0:
            cmd = ['python3', os.path.join(self.root, 'dass', 'scripts', 'InsertBuffersNaive.py'), '{}_graph_buf_new.dot'.format(self.top), '-d', self.options.superbuffdepth]
            if self.options.superbuffnontrans: cmd.append('--nontrans')
            self.logger.debug(subprocess.list2cmdline(cmd))
            superbuf = self.execute(cmd)
            os.rename('{}_graph_buf_new.dot'.format(self.top), '{}_graph_buf_new.dot.unbuf'.format(self.top))
            os.rename('{}_graph_buf_new_new.dot'.format(self.top), '{}_graph_buf_new.dot'.format(self.top))

    def profileCFG(self, isDS: bool = True):
        self.logger.info('Profiling control flows...')
        extension = '_ds' if isDS else ''
        freqcountersrc = os.path.join(self.root, 'dhls', 'elastic-circuits', 'FrequencyCounterPass', 'log_FrequencyCounter.c')
        cmd = ['cc', '-c', freqcountersrc]
        self.logger.debug(subprocess.list2cmdline(cmd))
        compilefreqcounter = self.execute(cmd)
        freqcounterlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'FrequencyCounterPass', 'libFrequencyCounterPass.so')
        cmd = [self.clang, '-fPIC', '-Xclang', '-load', '-Xclang', freqcounterlib, '-c', '{}{}.ll'.format(self.top, extension)]
        self.logger.debug(subprocess.list2cmdline(cmd))
        compileprofilellvm = self.execute(cmd)
        cmd = ['cc', '-fPIC', '{}{}.o'.format(self.top, extension), 'log_FrequencyCounter.o']
        self.logger.debug(subprocess.list2cmdline(cmd))
        compileprofileexec = self.execute(cmd)
        cmd = ['./a.out']
        self.logger.debug(subprocess.list2cmdline(cmd))
        runprofiling = self.execute(cmd)
        freqgatherlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'FrequencyDataGatherPass', 'libFrequencyDataGatherPass.so')
        cmd = [self.clang, '-Xclang', '-load', '-Xclang', freqgatherlib, '{}{}.ll'.format(self.top, extension), '-S']
        self.logger.debug(subprocess.list2cmdline(cmd))
        mapfreq = self.execute(cmd)
        files2delete = ['a.out', 'log_FrequencyCounter.o', '{}{}.o'.format(self.top, extension), 'mapping.txt', '{}{}.s'.format(self.top, extension)]
        for p in files2delete:
            os.remove(p)

    # TODO
    def autodass(self):
        self.logger.info('Searching for static islands...')
        return self

    def synthesizeislands(self):
        self.logger.info('Synthesizing static islands...')
        if not os.path.isdir('vhls'):
            os.mkdir('vhls')
        for p in glob.glob(os.path.join('vhls', '*')):
            if os.path.isfile(p):
                os.remove(p)
            else:
                shutil.rmtree(p)
        self.logger.debug('s')

        dhlsmemeleminfolib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'MemElemInfo', 'libLLVMMemElemInfo.so')
        dhlselasticpasslib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'ElasticPass', 'libElasticPass.so')
        dhlsbitwidthlib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'OptimizeBitwidth', 'libLLVMOptimizeBitWidth.so')
        dhlscfglib = os.path.join(self.root, 'dhls', 'elastic-circuits', 'build', 'MyCFGPass', 'libMyCFGPass.so')
        dassstaticislandlib = os.path.join(self.root, 'dass', 'build', 'StaticIslands', 'libStaticIslands.so')
        cmdheader = [self.opt, '-load', dhlsmemeleminfolib, '-load', dhlselasticpasslib, '-load', dhlsbitwidthlib, '-load', dhlscfglib, '-load', dassstaticislandlib]

        cmd = cmdheader + ['-pre-synthesise', '{}.ll'.format(self.top), '-S', '-dass_dir={}'.format(self.root)]
        self.logger.debug(subprocess.list2cmdline(cmd))
        staticislandpresynthesis = self.execute(cmd, logoutput = False)
        if os.path.isfile(os.path.join('vhls', 'ss_direct.tcl')):
            cmd = ['parallel-vhls.py', '--vhls_script', 'ss_direct.tcl']
            rtlgen = self.execute(cmd, cwd = 'vhls', logfile = 'static_island_presyn.log')
        else:
            self.logger.debug('No static island found.')
        cmd = cmdheader + ['-add-hs-interface', '{}.ll'.format(self.top), '-S', '-dass_dir={}'.format(self.root), '-has_ip=true', '-has_offset={}'.format(self.options.offset)]
        self.logger.debug(subprocess.list2cmdline(cmd))
        staticislandcodegen = self.execute(cmd, logoutput = False)
        if os.path.isfile(os.path.join('vhls', 'ss.tcl')):
            cmd = ['parallel-vhls.py', '--vhls_script', 'ss.tcl']
            rtlgen = self.execute(cmd, cwd = 'vhls', logfile = 'static_island_syn.log')
        return self

    def preprocess(self):
        self.logger.info('Preprocessing source files...')
        if self.options.llvminput:
            if not os.path.isfile(self.options.llvminput):
                self.logger.error('Cannot find the specified llvm input ir.')
                exit()
            shutil.copy(self.options.llvminput, '{}.ll'.format(self.top))
        else:
            # prase pragmas
            cfiles = glob.glob('*.c*')
            pragmaparser = os.path.join(self.root, 'dass', 'scripts', 'PragmaParser.py')
            cmd = ['python3', pragmaparser] + cfiles
            self.logger.debug(subprocess.list2cmdline(cmd))
            parsepragmas = self.execute(cmd)
            # llvm and dass front end
            dassfrontendlib = os.path.join(self.root, 'dass', 'build', 'Frontend', 'libFrontend.so')
            cmd = [self.clang, '-Xclang']
            if not self.options.disableopt:
                cmd = cmd + ['-disable-O0-optnone']
            cmd = cmd + ['-emit-llvm', '-S', '-g', '-c'] + cfiles + ['-o', '{}_0.ll'.format(self.top)]
            self.logger.debug(subprocess.list2cmdline(cmd))
            clangfrontend = self.execute(cmd)
            cmd = [self.opt, '-load', dassfrontendlib, '-name-loops', '-strip-debug', '-S', '{}_0.ll'.format(self.top), '-o', '{}_1.ll'.format(self.top)]
            self.logger.debug(subprocess.list2cmdline(cmd))
            dassllvmpreprocess = self.execute(cmd)
            cmd = [self.opt, '-mem2reg', '-constprop', '-simplifycfg', '-die', '-instcombine', '-lowerswitch', '-early-cse-memssa', '-S', '{}_1.ll'.format(self.top), '-o', '{}_2.ll'.format(self.top)]
            self.logger.debug(subprocess.list2cmdline(cmd))
            llvmfrontend = self.execute(cmd)
            boogielib = os.path.join(self.root, 'dass', 'build', 'BoogieVerification/libBoogieVerification.so')
            cmd = [self.opt, '-load', dassfrontendlib, '-load', boogielib, '-load-pragmas', '-fold-bitcast','-loop-interchange-check', '-S', '{}_2.ll'.format(self.top), '-o', '{}.ll'.format(self.top)] 
            self.logger.debug(subprocess.list2cmdline(cmd))
            dassllvmfrontend = self.execute(cmd)
            # files2delete = ['{}_0.ll'.format(self.top), '{}_1.ll'.format(self.top), '{}_2.ll'.format(self.top)]   
            # for p in files2delete:
            #     os.remove(p)
        # get DS llvm ir
        cmd = [self.opt, '-loop-rotate', '-S', '{}.ll'.format(self.top), '-o', '{}_ds.ll'.format(self.top)]
        self.logger.debug(subprocess.list2cmdline(cmd))
        dsfrontend = self.execute(cmd)
        # C simulation
        self.logger.info('Running C simulation...')
        cmd = ['lli', '{}_ds.ll'.format(self.top)]
        self.logger.debug(subprocess.list2cmdline(cmd))
        csim = self.execute(cmd)

# ---------- main function --------------

def main():
    INFO  = "DASS HLS Compiler"
    USAGE = "Usage: python dass.py ..."
    log_file = open("dass_hls.log","w")

    def showVersion():
        print(INFO)
        print(USAGE)
        sys.exit()

    optparser = OptionParser()

    # Processes
    optparser.add_option("-s", "--synthesis", action="store_true", dest="synthesis",
                         default=False, help="Synthesize designs, Default=False")
    optparser.add_option("-j", "--jobs", dest="jobs",
                         default=str(int(multiprocessing.cpu_count()/2)), help="Jobs, Default=half of the total cores")
                         # default='1', help="Jobs, Default=1")
    optparser.add_option("-e", "--evaluate", action="store_true", dest="evaluate",
                         default=False, help="Evaluate synthesis results, Default=False")
    optparser.add_option("-c", "--cosim", action="store_true", dest="cosim",
                         default=False, help="Enable cosimulation, Default=False")
    
    # Configurations
    optparser.add_option("-t", "--top", dest="top",
                         default="TOP", help="Top module, Default=TOP")
    optparser.add_option("-l", "--uselsq", action="store_true", dest="uselsq",
                         default=False, help="Use LSQs, Default=True")
    optparser.add_option("-b", "--simplebuffers", action="store_true", dest="simplebuffers",
                         default=False, help="Insert simple buffers Default=False")
    optparser.add_option("--offset", action="store_true", dest="offset",
                         default=True, help="Enable offset, Default=True")
    optparser.add_option("--auto-ifconv", action="store_true", dest="ifconv",
                         default=False, help="Enable if conversion, Default=False")
    optparser.add_option("--auto-cslowppl", action="store_true", dest="cslowppl",
                         default=False, help="Enable c slow pipelining, Default=False")
    optparser.add_option("--disable-opt", action="store_true", dest="disableopt",
                         default=False, help="Disable llvm O0 optimization, Default=False")
    optparser.add_option("--auto-parallelloops", action="store_true", dest="parallelloops",
                         default=False, help="Enable parallel loops, Default=False")
    optparser.add_option("--skip-frontend", action="store_true", dest="skipfrontend",
                         default=False, help="Skip frontend, Default=False")
    optparser.add_option("--skip-buffer", action="store_true", dest="skipbuffer",
                         default=False, help="Skip buffer stage, Default=False")
    optparser.add_option("--skip-buffer-mini", action="store_true", dest="skipbuffermini",
                         default=False, help="Skip dhls buffer stage, Default=False")
    optparser.add_option("--auto-dass", action="store_true", dest="autodass",
                         default=False, help="Automatically find static islands, Default=False")
    optparser.add_option("--export-png", action="store_true", dest="exportpng",
                         default=False, help="Export png, Default=False")
    optparser.add_option("--super-buff-depth", dest="superbuffdepth",
                         default=0, help="Insert transparent fifos with specified depth in each edge, Default=0")
    optparser.add_option("--super-buff-nontrans", action="store_true", dest="superbuffnontrans",
                         default=False, help="Use nontransparent buffers in super buffer, Default=False")
    optparser.add_option("--llvm", dest="llvminput",
                         default=None, help="Input llvm file, Default=None")
    optparser.add_option("--dot", dest="dotinput",
                         default=None, help="Input dot file, Default=None")
    optparser.add_option("--target", dest="target",
                         default="zynq", help="Target device: zynq/xcvu, Default=zynq")

    (options, args) = optparser.parse_args()

    dasshls = dass(options)
    dasshls.run()

if __name__ == '__main__':
    main()
